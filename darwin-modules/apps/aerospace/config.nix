{
  lib,
  pkgs,
  autostart,
  bordersBinary,
  borders,
  workspaces,
  windowRules,
  ...
}: let
  gaps = {
    inner = "10";
    outer = "10";
  };
  mods = rec {
    primary = "alt-cmd-ctrl";
    secondary = "${primary}-shift";
  };
  directions = {
    left = "left";
    down = "down";
    up = "up";
    right = "right";
  };
  loginStart =
    if autostart
    then "true"
    else "false";

  switchToWorkspace = ws:
    if ws.display != null
    then "workspace ${ws.name}" # for lettered workspaces, bound to a monitor
    else "summon-workspace ${ws.name}"; # for numbered workspaces

  # Generate workspace keybindings
  workspaceKeybindings = builtins.concatStringsSep "\n" (builtins.map (ws: ''
      ${mods.primary}-${lib.toLower (builtins.substring 0 1 ws.name)} = '${switchToWorkspace ws}'
      ${mods.secondary}-${lib.toLower (builtins.substring 0 1 ws.name)} = 'move-node-to-workspace ${ws.name}'
    '')
    workspaces);

  concatSep = sep: strings: builtins.concatStringsSep sep (builtins.filter (x: x != "") strings);

  # Generate workspace-to-monitor assignments
  workspaceAssignments = concatSep "\n" (
    builtins.map (
      ws:
        if ws.display != null
        then "${ws.name} = '${ws.display}'"
        else ""
    )
    workspaces
  );

  # Generate window rules
  generateWindowRules = builtins.concatStringsSep "\n" (builtins.map (rule: ''
      [[on-window-detected]]
      ${concatSep "\n" [
        (lib.optionalString (rule.appId != null) "if.app-id = '${rule.appId}'")
        (lib.optionalString (rule.appNameRegexSubstring != null) "if.app-name-regex-substring = '${rule.appNameRegexSubstring}'")
        (lib.optionalString (rule.windowTitleRegexSubstring != null) "if.window-title-regex-substring = '${rule.windowTitleRegexSubstring}'")
      ]}
      run = [${concatSep ", " [
        (lib.optionalString (rule.layout != null) "'layout ${rule.layout}'")
        (lib.optionalString (rule.workspace != null) "'move-node-to-workspace ${rule.workspace}'")
      ]}]
    '')
    windowRules);
in ''  # Generated by nix
  # You can use it to add commands that run after login to macOS user session.
  # 'start-at-login' needs to be 'true' for 'after-login-command' to work
  # Available commands: https://nikitabobko.github.io/AeroSpace/commands
  after-login-command = []

  # You can use it to add commands that run after AeroSpace startup.
  # 'after-startup-command' is run after 'after-login-command'
  # Available commands : https://nikitabobko.github.io/AeroSpace/commands
  after-startup-command = [
  ${
    if borders
    then "'exec-and-forget ${bordersBinary} active_color=0xffe2e2e3 inactive_color=0xff414550 width=8.0 style=round'"
    else ""
  }
  ]

  # Start AeroSpace at login
  start-at-login = ${loginStart}

  # Normalizations. See: https://nikitabobko.github.io/AeroSpace/guide#normalization
  enable-normalization-flatten-containers = true
  enable-normalization-opposite-orientation-for-nested-containers = true

  # See: https://nikitabobko.github.io/AeroSpace/guide#layouts
  # The 'accordion-padding' specifies the size of accordion padding
  # You can set 0 to disable the padding feature
  accordion-padding = 30

  # Possible values: tiles|accordion
  default-root-container-layout = 'tiles'

  # Possible values: horizontal|vertical|auto
  # 'auto' means: wide monitor (anything wider than high) gets horizontal orientation,
  #               tall monitor (anything higher than wide) gets vertical orientation
  default-root-container-orientation = 'auto'

  # Possible values: (qwerty|dvorak)
  # See https://nikitabobko.github.io/AeroSpace/guide#key-mapping
  key-mapping.preset = 'qwerty'

  # Mouse follows focus when focused monitor changes
  # Drop it from your config, if you don't like this behavior
  # See https://nikitabobko.github.io/AeroSpace/guide#on-focus-changed-callbacks
  # See https://nikitabobko.github.io/AeroSpace/commands#move-mouse
  on-focused-monitor-changed = ['move-mouse monitor-lazy-center']

  # Gaps between windows (inner-*) and between monitor edges (outer-*).
  # Possible values:
  # - Constant:     gaps.outer.top = 8
  # - Per monitor:  gaps.outer.top = [{ monitor.main = 16 }, { monitor."some-pattern" = 32 }, 24]
  #                 In this example, 24 is a default value when there is no match.
  #                 Monitor pattern is the same as for 'workspace-to-monitor-force-assignment'.
  #                 See: https://nikitabobko.github.io/AeroSpace/guide#assign-workspaces-to-monitors
  [gaps]
  inner.horizontal = ${gaps.inner}
  inner.vertical =   ${gaps.inner}
  outer.left =       ${gaps.outer}
  outer.bottom =     ${gaps.outer}
  outer.top =        ${gaps.outer}
  outer.right =      ${gaps.outer}

  # 'main' binding mode declaration
  # See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes
  # 'main' binding mode must be always presented
  [mode.main.binding]

  # All possible keys:
  # - Letters.        a, b, c, ..., z
  # - Numbers.        0, 1, 2, ..., 9
  # - Keypad numbers. keypad0, keypad1, keypad2, ..., keypad9
  # - F-keys.         f1, f2, ..., f20
  # - Special keys.   minus, equal, period, comma, slash, backslash, quote, semicolon, backtick,
  #                   leftSquareBracket, rightSquareBracket, space, enter, esc, backspace, tab
  # - Keypad special. keypadClear, keypadDecimalMark, keypadDivide, keypadEnter, keypadEqual,
  #                   keypadMinus, keypadMultiply, keypadPlus
  # - Arrows.         left, down, up, right

  # All possible modifiers: cmd, alt, ctrl, shift

  # All possible commands: https://nikitabobko.github.io/AeroSpace/commands

  # See: https://nikitabobko.github.io/AeroSpace/commands#exec-and-forget
  # You can uncomment the following lines to open up terminal with alt + enter shortcut (like in i3)
  ${mods.primary}-enter = 'exec-and-forget ${pkgs.wezterm}/bin/wezterm start --always-new-process --cwd ~'

  ${mods.secondary}-enter = 'fullscreen'

  # See: https://nikitabobko.github.io/AeroSpace/commands#layout
  ${mods.primary}-slash = 'layout tiles horizontal vertical'
  ${mods.primary}-comma = 'layout accordion horizontal vertical'

  # See: https://nikitabobko.github.io/AeroSpace/commands#focus
  ${mods.primary}-${directions.left}   = 'focus left'
  ${mods.primary}-${directions.down}   = 'focus down'
  ${mods.primary}-${directions.up}     = 'focus up'
  ${mods.primary}-${directions.right}  = 'focus right'

  # See: https://nikitabobko.github.io/AeroSpace/commands#move
  ${mods.secondary}-${directions.left}   = 'move left'
  ${mods.secondary}-${directions.down}   = 'move down'
  ${mods.secondary}-${directions.up}     = 'move up'
  ${mods.secondary}-${directions.right}  = 'move right'

  # See: https://nikitabobko.github.io/AeroSpace/commands#workspace
  # See: https://nikitabobko.github.io/AeroSpace/commands#move-node-to-workspace
  ${workspaceKeybindings}

  # See: https://nikitabobko.github.io/AeroSpace/commands#workspace-back-and-forth
  ${mods.primary}-tab = 'workspace-back-and-forth'
  # See: https://nikitabobko.github.io/AeroSpace/commands#move-workspace-to-monitor
  ${mods.secondary}-tab = 'move-workspace-to-monitor --wrap-around next'

  # See: https://nikitabobko.github.io/AeroSpace/commands#mode
  ${mods.secondary}-semicolon = 'mode service'
  ${mods.secondary}-a = 'mode arrange'
  ${mods.secondary}-r = 'mode resize'

  # 'service' binding mode declaration.
  # See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes
  [mode.service.binding]
  esc = ['reload-config', 'mode main']
  r = ['flatten-workspace-tree', 'mode main'] # reset layout
  #s = ['layout sticky tiling', 'mode main'] # sticky is not yet supported https://github.com/nikitabobko/AeroSpace/issues/2
  f = ['layout floating tiling', 'mode main'] # Toggle between floating and tiling layout
  backspace = ['close-all-windows-but-current', 'mode main']

  [mode.arrange.binding]
  esc = ['mode main']
  enter = ['mode main']
  ${directions.left} = ['focus left']
  ${directions.down} = ['focus down']
  ${directions.up} = ['focus up']
  ${directions.right} = ['focus right']
  shift-${directions.left}   = ['move left']
  shift-${directions.down}   = ['move down']
  shift-${directions.up}     = ['move up']
  shift-${directions.right}  = ['move right']
  minus = 'resize smart -50'
  equal = 'resize smart +50'
  ${mods.primary}-${directions.left}   = ['join-with left']
  ${mods.primary}-${directions.down}   = ['join-with down']
  ${mods.primary}-${directions.up}     = ['join-with up']
  ${mods.primary}-${directions.right}  = ['join-with right']

  [mode.resize.binding]
  # See: https://nikitabobko.github.io/AeroSpace/commands#resize
  ${directions.left} = 'resize width -50'
  ${directions.down} = 'resize height +50'
  ${directions.up} = 'resize height -50'
  ${directions.right} = 'resize width +50'
  minus = 'resize smart -50'
  equal = 'resize smart +50'
  enter = 'mode main'
  esc = 'mode main'

  [workspace-to-monitor-force-assignment]
  ${workspaceAssignments}

  # Window rules
  ${generateWindowRules}
''
